package com.cliente.services;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import com.cliente.entity.Cliente;
import com.cliente.entity.Endereco;
import com.cliente.entity.dto.EnderecoDTO;
import com.cliente.repository.ClienteRepository;
import com.cliente.repository.EnderecoRepository;

import javassist.NotFoundException;

@Service
public class EnderecoServices {
	
	 @Autowired
	private EnderecoRepository endRep;
	 @Autowired
	 private ClienteRepository cliRep;
	
	public List<Endereco> findAll(){
		List<Endereco> list = endRep.findAll();
		return list;
	}
	
	public EnderecoDTO findById(Long id) throws NotFoundException {
		Endereco end = endRep.findById(id).orElseThrow(() -> new NotFoundException("Registro não encontrado!!!"));
		return EnderecoDTO.consumeDTO(end);
	}

	public EnderecoDTO salvaEndereco(EnderecoDTO end) {
		Optional<Cliente> cli = cliRep.findById(end.getCliente().getId_cliente());
		end.setCliente(cli.get());
		return EnderecoDTO.consumeDTO(endRep.save(end));
	}
	
	public EnderecoDTO update(Endereco end, Long id) {
		Assert.notNull(id,"Não foi possível atualizar o cadastro!");
		Endereco endereco = endRep.findById(id).get();
		
		endereco.setLogradouro(end.getLogradouro());
		endereco.setNro(end.getNro());
		endereco.setBairro(end.getBairro());
		endereco.setCidade(end.getCidade());
		endereco.setCEP(end.getCEP());
		endereco.setUf(end.getUf());
		endereco.setCliente(end.getCliente());		
		
		return EnderecoDTO.consumeDTO(endRep.save(endereco));
	}
	
	public void delete(Long id) {
		endRep.deleteById(id);
	}
}
